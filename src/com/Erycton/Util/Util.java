package com.Erycton.Util;import java.text.SimpleDateFormat;import java.util.Date;public class Util {	    /***     * booleanで渡された対戦種別をStringにして返します。     * @param type true-double, false-single     * @return true-"single", false-"double"     */    public String bl_str(boolean battle_type){    	    	String btl = null;    	    	if (battle_type){    		btl  = Const.BL_TRUE;    	}else{    		btl =  Const.BL_FALSE;    	}    	return btl;    }        /***     * Stringで渡された対戦種別をbooleanにして返します。     * @param type "true" or "false"     * @return true-"single", false-"double"     */    public Boolean str_bl(String battle_type){    	    	boolean bl = false;    	    	if (battle_type.equals("true")){    		bl  = true;    	}else{    		bl =  false;    	}    	return bl;    }		/**	 * メッセージを取得	 * @param Integer num	 * @return String message	 */	public String GetMessage(Integer num){				String message = null;				switch(num){			case 0: message = Const.str_null;	   break;//			case 1: message = Const.MSG_TEXT_PROP; break;			case 2: message = Const.MSG_TEXT_NAME; break;		}				return message;	}	    /**     * 変換対象全角記号かを判定する。     * @param pc     * @return     */    private static boolean is2Sign(char pc) {        for (char c : Const.SIGNS2) {            if (c == pc) {                return true;            }        }        return false;    }	    /***     * 全角文字を半角変換.     * @param str - 全角文字     * @return sb.toString() - 半角にした全角文字     */	 public String convert(String str) {	        char[] cc = str.toCharArray();	        StringBuilder sb = new StringBuilder();	        for (char c : cc) {	            char newChar = c;	            if ((('Ａ' <= c) && (c <= 'Ｚ')) || (('ａ' <= c) && (c <= 'ｚ'))	                    || (('１' <= c) && (c <= '９')) || is2Sign(c)) {	                // 変換対象のcharだった場合に全角文字と半角文字の差分を引く	                newChar = (char) (c - Const.DIFFERENCE);	            }	            sb.append(newChar);	        }	        return sb.toString();	    }			/***	 * 改行コードを取得.	 * @return - 改行コード	 */	public String GetSeparator(){				String crlf = System.getProperty("line.separator");				return crlf;	}	/***	 * 対戦結果変換(Boolean <--> String)	 * @param resultBean	 * @return	 */	public String ConvertResult(Integer result){				String res = null;				switch(result){			case 0: res = Const.WIN;	 break;			case 1: res = Const.LOSE;	 break;			case 2: res = Const.CUT; 	 break;		}		return res;	}		/***	 * 日付の項目を取得	 * @param str[] - 取得する項目名	 * @return  res - 日時等	 */	public String[] getDate(){				// 現在時刻でDateオブジェクト作成.		Date now = new Date(System.currentTimeMillis());		// 年/月/日/時/分/秒/曜日のフォーマット作成.		SimpleDateFormat sdf_now = new SimpleDateFormat(Const.df);		// Date → フォーマットに嵌める → toString() → "/"でsplitして格納. 		String[] str_now = ((sdf_now.format(now)).toString().split("/"));	    		return str_now;	}		/***	 * nullチェック	 * @param str - 判定する文字列.	 * @return bl - nullの場合false.	 */	public boolean isNull(String str) {		boolean bl = false;		if (str.equals(null) || str == null || str.equals(Const.strnull) || str.equals(Const.str_null)){			bl = false;		} else {			bl = true;		}				return bl;	}	/***	 * 数字判定	 * @param str - 数字か判定する文字列.	 * @return bl - 数字ならtrue.	 */	public boolean isNumric(String str) {		boolean bl = false;		char chr = Const.zero;		for (int i = 0; i < str.length(); i++) {			chr = str.charAt(i);			if (chr < Const.zero || chr > Const.nine) {				return bl;			}else{				bl = true;			}		}		return bl;	}	/***	 * 数値範囲判定	 * @param num - 対象数値.	 * @param rng_sml - 許容可能範囲最大数値.	 * @param rng_big - 許容可能最大数値	 * @return bl - 許容範囲の場合true.	 */	public boolean isRange(Integer num, Integer rng_sml, Integer rng_big) {		boolean bl = false;		if ( rng_big >= num && num >= rng_sml) {			bl = true;		}else{			bl = false;		}		return bl;	}	/***	 * 対戦結果判定	 * @param win	 * @param lose	 * @param cut	 * @return	 */	public Integer isResult(boolean win, boolean lose, boolean cut) {		// 0 - win		// 1 - lose		// 2 - cut		Integer num = 2;		if ( win == true				&& lose == false				&& cut  == false ){			num =  0;		} else if ( lose == true				&& win   == false				&& cut   == false ){			num =  1;		} else {			num =  2;		}		return num;	}}