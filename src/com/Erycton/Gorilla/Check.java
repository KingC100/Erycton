package com.Erycton.Gorilla;import com.Erycton.Util.Const;import com.Erycton.Util.Reader;import com.Erycton.Util.Util;public class Check {	Util util = new Util();	public boolean Chk_Total(String[] ttl, Boolean type){		// type - trueならdouble, falseならsingle.		boolean bl = false;		boolean[] flg = new boolean[16];		flg[0]  = util.isNull(ttl[0]);   // rival_name		flg[1]  = util.isNull(ttl[1]);   // rival_rate		flg[2]  = util.isNull(ttl[2]);   // rival_show 1		flg[3]  = util.isNull(ttl[3]);   // 2		flg[4]  = util.isNull(ttl[4]);   // 3		flg[5]	= true;						 // 4		flg[6]	= true;						 // 5		flg[7]	= true;						 // 6		flg[8]  = util.isNull(ttl[8]);   // elect_me 1		flg[9]  = util.isNull(ttl[9]);   // 2		flg[10] = util.isNull(ttl[10]); // 3		flg[11] = util.isNull(ttl[11]); // elect_rival 1		flg[12]	= true;					 // 2		flg[13]	= true;					// 3		flg[14] = true;					// elect_me 4		flg[15] = true;					// elect_rival 4				if(flg[0]){			flg[0] = Chk_RivalName(ttl[0]);		}		if(flg[1]){			flg[1] = Chk_RivalRate(ttl[1]);		}		if(flg[2]){			flg[2] = Chk_Pkmn(ttl[2]);		}		if(flg[3]){			flg[3] = Chk_Pkmn(ttl[3]);		}		if(flg[4]){			flg[4] = Chk_Pkmn(ttl[4]);		}		if(flg[5]){			flg[5] = Chk_Pkmn(ttl[5]);			// 相手見せ合い4匹目の処理.			if(flg[5]){				flg[6] = Chk_Pkmn(ttl[6]);				// 相手見せ合い5匹目の処理.				if(flg[6]){					flg[7] = Chk_Pkmn(ttl[7]);				}			}		}		if(flg[8]){			flg[8] = Chk_Pkmn(ttl[8]);		}		if(flg[9]){			flg[9] = Chk_Pkmn(ttl[9]);		}		if(flg[10]){			flg[10] = Chk_Pkmn(ttl[10]);		}		if(flg[11]){			flg[11] = Chk_Pkmn(ttl[11]);			// 相手選出2匹目の処理.			if(flg[11]){				flg[12] = Chk_Pkmn(ttl[12]);				// 相手選出3匹目の処理.				if(flg[12]){					flg[13] = Chk_Pkmn(ttl[13]);				}			}		}		// Double対応.		if(type){			flg[14] = Chk_Pkmn(ttl[14]);			flg[15] = Chk_Pkmn(ttl[15]);		}				// 各々のチェック結果を判定.		for(boolean fbl:flg){			if (!(fbl)){				return false;			}			bl = true;		}				return bl;	}	/* チェック */		/***	 * Check rivalname	 * @param String : str - rivalname	 * @return boolean : bl - rivalname.length is 1~7	 */	public boolean Chk_RivalName(String str){				boolean bl = false;				if(str.length() <= 7 || str.length() >= 1){			bl = true;		}		return bl;	}	/***	 * Check rivalrate	 * @param String : str - rivalrate	 * @return boolean : bl - rivalrate - 0~10000? 	 */	public boolean Chk_RivalRate(String str){				boolean bl = false;				try{			Util util = new Util();						bl = Util.isNumric(str);			Integer num;			if (bl){				 num = Integer.parseInt(str);				if(util.isRange(num, 0, 10000)){					bl = true;				}			}			}catch(Exception e){				e.printStackTrace();				return bl;			}		return bl;	}		/***	 * Name of the pkmn?	 * @return Boolean : bl - pkmn?	 * @param String : str - pkmn_name	 ***/ 	public boolean Chk_Pkmn(String str){				boolean bl = false;				try{			Reader reader = new Reader();			// pokomon_name.txtからポケモン名を取得			String txt_pkmn[] = reader.txtReader(Const.POKEMONNAME_NORMAL);						if (!(util.isRange(str.length(), 0, 10))){				return bl;			}			// 対象ポケモン名がpokemon_name.txtに存在するか確認			for (String t:txt_pkmn){				if (str.equals(t)){					bl =  true;				}			}								}catch(Exception e){			e.printStackTrace();		}		return bl;	}	/***	 * Chk_Result	 * @param Integer : num - 0or1or2	 * @return boolean : bl - 0or1or2?	 */	public boolean Chk_Result(Integer num){				boolean bl = false;				if(util.isRange(num, 0, 2)){			bl = true;		}		return bl;	}}