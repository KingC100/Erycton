package com.Erycton.Gorilla;import java.io.File;import com.Erycton.Util.Const;import com.Erycton.Util.Reader;import com.Erycton.Util.Util;public class Check {	Util util = new Util();		/***	 * 実行に必要なファイルが存在するかチェックします。	 * @return res - 0:全て存在. 1:プロパティファイル無し 2:ポケモン名のファイルが無し.	 */	public Integer Chk_File(){				Reader reader = new Reader();		// 返り値.		Integer res = 0;				// プロパティファイル		File prop_file 	 = new File(Const.PROPERTIES_PATH);		// ポケモン名ファイル		File normal_file = new File(reader.propReader(Const.POKEMONNAME_NORMAL));		File forme_file	 = new File(reader.propReader(Const.POKEMONNAME_FORME));				// Erycton.propertiesが存在しない場合1を返す.		if(!(prop_file.exists())){//			res = 1;		// ポケモン名のファイルのいずれかが存在しない場合2を返す.		}else if(!(normal_file.exists()) || !(forme_file.exists())){			res = 2;		}		// 必要ファイルが存在する場合は0を返す.		return res;	}	/***	 * 	 * @param ttl	- 入力テキスト 	 * @param type - 対戦種別	 * @return bl - 入力テキストのチェック結果.	 */	public boolean Chk_Total(String[] ttl, Boolean type){			// type - trueならdouble, falseならsingle.		boolean bl		= false;		boolean[] flg	= new boolean[16];				flg[0]	= util.isNull(ttl[0]);	// rival_name		flg[1]	= util.isNull(ttl[1]);	// rival_rate		flg[2]	= util.isNull(ttl[2]);	// rival_show 1		flg[3]	= util.isNull(ttl[3]);	// 2		flg[4]	= util.isNull(ttl[4]);	// 3		flg[5]	= true;					// 4		flg[6]	= true;					// 5		flg[7]	= true;					// 6		flg[8]	= util.isNull(ttl[8]);	// elect_me 1		flg[9]	= util.isNull(ttl[9]);	// 2		flg[10]	= util.isNull(ttl[10]);	// 3		flg[11]	= util.isNull(ttl[11]);	// elect_rival 1		flg[12]	= true;					// 2		flg[13]	= true;					// 3		flg[14]	= true;					// elect_me 4		flg[15]	= true;					// elect_rival 4				if(flg[0]){			flg[0] = Chk_RivalName(ttl[0]);		}		if(flg[1]){			flg[1] = Chk_RivalRate(ttl[1]);		}		if(flg[2]){			flg[2] = Chk_Pkmn(ttl[2]);		}		if(flg[3]){			flg[3] = Chk_Pkmn(ttl[3]);		}		if(flg[4]){			flg[4] = Chk_Pkmn(ttl[4]);		}		if(flg[5]){			flg[5] = Chk_Pkmn(ttl[5]);			// 相手見せ合い4匹目の処理.			if(flg[5]){				flg[6] = Chk_Pkmn(ttl[6]);				// 相手見せ合い5匹目の処理.				if(flg[6]){					flg[7] = Chk_Pkmn(ttl[7]);				}			}		}		if(flg[8]){			flg[8] = Chk_Pkmn(ttl[8]);		}		if(flg[9]){			flg[9] = Chk_Pkmn(ttl[9]);		}		if(flg[10]){			flg[10] = Chk_Pkmn(ttl[10]);		}		if(flg[11]){			flg[11] = Chk_Pkmn(ttl[11]);			// 相手選出2匹目の処理.			if(flg[11]){				flg[12] = Chk_Pkmn(ttl[12]);				// 相手選出3匹目の処理.				if(flg[12]){					flg[13] = Chk_Pkmn(ttl[13]);				}			}		}		// Double対応.		if(type){			flg[14] = Chk_Pkmn(ttl[14]);			flg[15] = Chk_Pkmn(ttl[15]);		}		// 各々のチェック結果を判定.		for(boolean fbl:flg){			if (!(fbl)){				return false;			}			bl = true;		}		return bl;	}	/***	 * 対戦相手名をチェック.	 * @param str - 対戦相手名	 * @return bl - チェック結果	 */	public boolean Chk_RivalName(String str){				boolean bl = false;				try{					if(str.length() <= 7 && str.length() >= 1){			bl = true;			}				}catch (Exception e){			e.printStackTrace();		}		return bl;	}	/***	 * 対戦相手レート、対戦数チェック	 * @param レートor対戦数	 * @return  チェック結果	 */	public boolean Chk_RivalRate(String str){				boolean bl = false;		Integer num, len;				try{						bl = util.isNumric(str);			if (bl){				 num = Integer.parseInt(str);				 len = str.length();				if((util.isRange(num, 0, 10000) && util.isRange(len, 0, 4))){					bl = true;				}else{					bl = false;				}			}						}catch(Exception e){				e.printStackTrace();			}		return bl;	}		/***	 * Name of the pkmn?	 * @return Boolean : bl - pkmn?	 * @param String : str - pkmn_name	 ***/ 	public boolean Chk_Pkmn(String str){				boolean bl = false;		Reader reader = new Reader();				try{			// pokomon_name.txtからポケモン名を取得.			String txt_pkmn[] = reader.txtReader(Const.POKEMONNAME_NORMAL);						// 範囲チェック.			if (!(util.isRange(str.length(), 0, 10))){				return bl;			}						// 対象ポケモン名がpokemon_name.txtに存在するか判定.			for (String t:txt_pkmn){				if (str.equals(t)){					// 存在する場合はtrue.					bl =  true;				}			}								}catch(Exception e){			e.printStackTrace();		}		return bl;	}		/***	 * 対戦結果チェック	 * @param num - ラジオボタンの入力結果	 * @return bl - チェック結果	 */	public boolean Chk_Result(Integer num){				boolean bl = false;		try{		if(util.isRange(num, 0, 2)){			bl = true;		}				}catch(Exception e){			e.printStackTrace();		}		return bl;	}}