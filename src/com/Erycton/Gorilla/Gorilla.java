package com.Erycton.Gorilla;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.GridLayout;import java.awt.Panel;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import javax.swing.BoxLayout;import javax.swing.ButtonGroup;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JPanel;import javax.swing.JRadioButton;import javax.swing.JTextField;import javax.swing.SwingConstants;import javax.swing.event.DocumentEvent;import javax.swing.event.DocumentListener;import com.Erycton.Data.ResultBean;import com.Erycton.Util.Const;import com.Erycton.Util.Util;import com.Erycton.Util.Writer;@SuppressWarnings("serial")public class Gorilla extends JFrame implements ActionListener {    private static JTextField txt_RIVAL_NAME;    private static JTextField txt_RIVAL_SHOW_1;    private static  JTextField txt_RIVAL_SHOW_2;    private static  JLabel lbl_RIVAL_RATE;    private static  JTextField txt_RIVAL_RATE;    private static  JTextField txt_RIVAL_SHOW_3;    private static  JTextField txt_RIVAL_SHOW_4;    private static  JTextField txt_RIVAL_SHOW_5;    private static  JTextField txt_RIVAL_SHOW_6;    private static  JTextField txt_ELECT_ME_1;    private static  JTextField txt_ELECT_ME_2;    private static  JTextField txt_ELECT_ME_3;    private static  JTextField txt_ELECT_ME_4;    private static  JTextField txt_ELECT_RIVAL_1;    private static  JTextField txt_ELECT_RIVAL_2;    private static  JTextField txt_ELECT_RIVAL_3;    private static  JTextField txt_ELECT_RIVAL_4;    private static	JTextField txt_DOUBLE;    public Gorilla() {        setTitle(Const.WindowTitle);          getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.X_AXIS));                Panel pnl_PHASE_1 = new Panel();        getContentPane().setLayout(new GridLayout(Const.GRID_LAYOUT_Y, Const.GRID_LAYOUT_X));        getContentPane().add(pnl_PHASE_1);                        JLabel lbl_RIVAL_NAME = new JLabel(Const.LBL_TEXT_RIVAL_NAME);                        lbl_RIVAL_NAME.setHorizontalAlignment(SwingConstants.LEFT);                        pnl_PHASE_1.add(lbl_RIVAL_NAME);                                txt_RIVAL_NAME = new JTextField();                                txt_RIVAL_NAME.setHorizontalAlignment(SwingConstants.LEFT);                                pnl_PHASE_1.add(txt_RIVAL_NAME);                                txt_RIVAL_NAME.setColumns(Const.RIVAL_NAME_TXT_NUM);                                        lbl_RIVAL_RATE = new JLabel(Const.LBL_TEXT_RIVAL_RATE);                                        lbl_RIVAL_RATE.setHorizontalAlignment(SwingConstants.LEFT);                                        pnl_PHASE_1.add(lbl_RIVAL_RATE);                                                txt_RIVAL_RATE = new JTextField();                                                txt_RIVAL_RATE.setHorizontalAlignment(SwingConstants.LEFT);                                                pnl_PHASE_1.add(txt_RIVAL_RATE);                                                txt_RIVAL_RATE.setColumns(Const.RIVAL_RATE_TXT_NUM);        final ImageLoad imageLoad = new ImageLoad();        Panel pnl_PHASE_2_1 = new Panel();        getContentPane().add(pnl_PHASE_2_1);        JLabel lbl_RIVAL_SHOW_1 = new JLabel(Const.LBL_TEXT_RIVAL_SHOW_1);        pnl_PHASE_2_1.add(lbl_RIVAL_SHOW_1);        txt_RIVAL_SHOW_1 = new JTextField();        txt_RIVAL_SHOW_1.setColumns(Const.SET_TEXT_COLUMNS);        pnl_PHASE_2_1.add(txt_RIVAL_SHOW_1);        // icon表示Label.        final JLabel pic_RIVAL_SHOW_1 	= new JLabel();        pic_RIVAL_SHOW_1.setIcon(imageLoad.GetImage(Const.HATENA));        pnl_PHASE_2_1.add(pic_RIVAL_SHOW_1);        JLabel lbl_RIVAL_SHOW_2 = new JLabel(Const.LBL_TEXT_RIVAL_SHOW_2);        pnl_PHASE_2_1.add(lbl_RIVAL_SHOW_2);        txt_RIVAL_SHOW_2 = new JTextField();        txt_RIVAL_SHOW_2.setColumns(Const.SET_TEXT_COLUMNS);        pnl_PHASE_2_1.add(txt_RIVAL_SHOW_2);        // icon表示Label.        final JLabel pic_RIVAL_SHOW_2 	= new JLabel();        pic_RIVAL_SHOW_2.setIcon(imageLoad.GetImage(Const.HATENA));        pnl_PHASE_2_1.add(pic_RIVAL_SHOW_2);        JLabel lbl_RIVAL_SHOW_3 = new JLabel(Const.LBL_TEXT_RIVAL_SHOW_3);        pnl_PHASE_2_1.add(lbl_RIVAL_SHOW_3);        txt_RIVAL_SHOW_3 = new JTextField();        txt_RIVAL_SHOW_3.setColumns(Const.SET_TEXT_COLUMNS);        pnl_PHASE_2_1.add(txt_RIVAL_SHOW_3);        // icon表示Label.        final JLabel pic_RIVAL_SHOW_3 	= new JLabel();        pic_RIVAL_SHOW_3.setIcon(imageLoad.GetImage(Const.HATENA));        pnl_PHASE_2_1.add(pic_RIVAL_SHOW_3);                final JButton btn_ENTRY = new JButton(Const.BTN_TEXT_ENTRY);                Panel pnl_PHASE_2_2 = new Panel();                getContentPane().add(pnl_PHASE_2_2);                JLabel lbl_RIVAL_SHOW_4 = new JLabel(Const.LBL_TEXT_RIVAL_SHOW_4);                pnl_PHASE_2_2.add(lbl_RIVAL_SHOW_4);                txt_RIVAL_SHOW_4 = new JTextField();                txt_RIVAL_SHOW_4.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_2_2.add(txt_RIVAL_SHOW_4);                // icon表示Label.                final JLabel pic_RIVAL_SHOW_4 	= new JLabel();                pic_RIVAL_SHOW_4.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_2_2.add(pic_RIVAL_SHOW_4);                JLabel lbl_RIVAL_SHOW_5 = new JLabel(Const.LBL_TEXT_RIVAL_SHOW_5);                pnl_PHASE_2_2.add(lbl_RIVAL_SHOW_5);                txt_RIVAL_SHOW_5 = new JTextField();                txt_RIVAL_SHOW_5.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_2_2.add(txt_RIVAL_SHOW_5);                // icon表示Label.                final JLabel pic_RIVAL_SHOW_5 	= new JLabel();                pic_RIVAL_SHOW_5.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_2_2.add(pic_RIVAL_SHOW_5);                JLabel lbl_RIVAL_SHOW_6 = new JLabel(Const.LBL_TEXT_RIVAL_SHOW_6);                pnl_PHASE_2_2.add(lbl_RIVAL_SHOW_6);                txt_RIVAL_SHOW_6 = new JTextField();                txt_RIVAL_SHOW_6.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_2_2.add(txt_RIVAL_SHOW_6);                // icon表示Label.                final JLabel pic_RIVAL_SHOW_6 	= new JLabel();                pic_RIVAL_SHOW_6.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_2_2.add(pic_RIVAL_SHOW_6);                                JPanel pnl_PHASE_2_3 = new JPanel();                getContentPane().add(pnl_PHASE_2_3);                JLabel lbl_ELECT_ME_1 = new JLabel(Const.LBL_TEXT_ELECT_ME_1);                pnl_PHASE_2_3.add(lbl_ELECT_ME_1);                txt_ELECT_ME_1 = new JTextField();                txt_ELECT_ME_1.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_2_3.add(txt_ELECT_ME_1);                // icon表示Label.                final JLabel pic_ELECT_ME_1 	= new JLabel();                pic_ELECT_ME_1.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_2_3.add(pic_ELECT_ME_1);                JLabel lbl_ELECT_ME_2 = new JLabel(Const.LBL_TEXT_ELECT_ME_2);                pnl_PHASE_2_3.add(lbl_ELECT_ME_2);                txt_ELECT_ME_2 = new JTextField();                txt_ELECT_ME_2.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_2_3.add(txt_ELECT_ME_2);                // icon表示Label.                final JLabel pic_ELECT_ME_2 	= new JLabel();                pic_ELECT_ME_2.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_2_3.add(pic_ELECT_ME_2);                JLabel lbl_ELECT_ME_3 = new JLabel(Const.LBL_TEXT_ELECT_ME_3);                pnl_PHASE_2_3.add(lbl_ELECT_ME_3);                txt_ELECT_ME_3 = new JTextField();                txt_ELECT_ME_3.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_2_3.add(txt_ELECT_ME_3);                // icon表示Label.                final JLabel pic_ELECT_ME_3 	= new JLabel();                pic_ELECT_ME_3.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_2_3.add(pic_ELECT_ME_3);                                final JLabel lbl_ELECT_ME_4 = new JLabel(Const.LBL_TEXT_ELECT_ME_4);                pnl_PHASE_2_3.add(lbl_ELECT_ME_4);                txt_ELECT_ME_4 = new JTextField();                txt_ELECT_ME_4.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_2_3.add(txt_ELECT_ME_4);                // icon表示Label.                final JLabel pic_ELECT_ME_4 	= new JLabel();                pic_ELECT_ME_4.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_2_3.add(pic_ELECT_ME_4);                Panel pnl_PHASE_3 = new Panel();                getContentPane().add(pnl_PHASE_3);                                JLabel lbl_ELECT_RIVAL_1 = new JLabel(Const.LBL_TEXT_ELECT_RIVAL_1);                pnl_PHASE_3.add(lbl_ELECT_RIVAL_1);                txt_ELECT_RIVAL_1 = new JTextField();                txt_ELECT_RIVAL_1.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_3.add(txt_ELECT_RIVAL_1);                // icon表示Label.                final JLabel pic_ELECT_RIVAL_1 	= new JLabel();                pic_ELECT_RIVAL_1.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_3.add(pic_ELECT_RIVAL_1);                                JLabel lbl_ELECT_RIVAL_2 = new JLabel(Const.LBL_TEXT_ELECT_RIVAL_2);                pnl_PHASE_3.add(lbl_ELECT_RIVAL_2);                txt_ELECT_RIVAL_2 = new JTextField();                txt_ELECT_RIVAL_2.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_3.add(txt_ELECT_RIVAL_2);                // icon表示Label.                final JLabel pic_ELECT_RIVAL_2 	= new JLabel();                pic_ELECT_RIVAL_2.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_3.add(pic_ELECT_RIVAL_2);                JLabel lbl_ELECT_RIVAL_3 = new JLabel(Const.LBL_TEXT_ELECT_RIVAL_3);                pnl_PHASE_3.add(lbl_ELECT_RIVAL_3);                txt_ELECT_RIVAL_3 = new JTextField();                txt_ELECT_RIVAL_3.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_3.add(txt_ELECT_RIVAL_3);                // icon表示Label.                final JLabel pic_ELECT_RIVAL_3 	= new JLabel();                pic_ELECT_RIVAL_3.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_3.add(pic_ELECT_RIVAL_3);                                final JLabel lbl_ELECT_RIVAL_4 = new JLabel(Const.LBL_TEXT_ELECT_RIVAL_4);                pnl_PHASE_3.add(lbl_ELECT_RIVAL_4);                txt_ELECT_RIVAL_4 = new JTextField();                txt_ELECT_RIVAL_4.setColumns(Const.SET_TEXT_COLUMNS);                pnl_PHASE_3.add(txt_ELECT_RIVAL_4);                // icon表示Label.                final JLabel pic_ELECT_RIVAL_4 	= new JLabel();                pic_ELECT_RIVAL_4.setIcon(imageLoad.GetImage(Const.HATENA));                pnl_PHASE_3.add(pic_ELECT_RIVAL_4);                                final JPanel pnl_PHASE_4 = new JPanel();                getContentPane().add(pnl_PHASE_4, BorderLayout.CENTER);                JLabel btn_RESULT = new JLabel(Const.BTN_TEXT_RESULT);                pnl_PHASE_4.add(btn_RESULT);                                // 対戦結果選択ラジオボタン.                ButtonGroup grp = new ButtonGroup();                final JRadioButton rbtn_WIN = new JRadioButton(Const.RBTN_TEXT_WIN);                pnl_PHASE_4.add(rbtn_WIN);                final JRadioButton rbtn_LOSE = new JRadioButton(Const.RBTN_TEXT_LOSE);                pnl_PHASE_4.add(rbtn_LOSE);                final JRadioButton rbtn_CUT = new JRadioButton(Const.RBTN_TEXT_CUT);                pnl_PHASE_4.add(rbtn_CUT);    			final JLabel lbl_ERR = new JLabel(Const.LBL_TEXT_ERR_EMPTY);                pnl_PHASE_4.add(lbl_ERR);                grp.add(rbtn_WIN);                grp.add(rbtn_LOSE);                grp.add(rbtn_CUT);                // 隠しテキストボックス.                txt_DOUBLE= new JTextField();                txt_DOUBLE.setColumns(Const.SET_TEXT_COLUMNS);                txt_DOUBLE.setVisible(false);                pnl_PHASE_4.add(txt_DOUBLE);                /* アイコン更新処理 */                txt_RIVAL_SHOW_1.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_1.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_1.getText()));					}					public void removeUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_1.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_1.getText()));					};                });                                txt_RIVAL_SHOW_2.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_2.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_2.getText()));                        }					public void removeUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_2.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_2.getText()));                        };                });                txt_RIVAL_SHOW_3.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_3.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_3.getText()));					}					public void removeUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_3.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_3.getText()));					};                });                                txt_RIVAL_SHOW_4.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_4.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_4.getText()));					}					public void removeUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_4.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_4.getText()));					};                });                                txt_RIVAL_SHOW_5.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_5.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_5.getText()));					}					public void removeUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_5.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_5.getText()));					};                });                                txt_RIVAL_SHOW_6.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_6.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_6.getText()));					}					public void removeUpdate(DocumentEvent e) {                        pic_RIVAL_SHOW_6.setIcon(imageLoad.GetImage(txt_RIVAL_SHOW_6.getText()));					};                });                                txt_ELECT_ME_1.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {                        pic_ELECT_ME_1.setIcon(imageLoad.GetImage(txt_ELECT_ME_1.getText()));					}					public void removeUpdate(DocumentEvent e) {                        pic_ELECT_ME_1.setIcon(imageLoad.GetImage(txt_ELECT_ME_1.getText()));					};                });                                txt_ELECT_ME_2.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {                        pic_ELECT_ME_2.setIcon(imageLoad.GetImage(txt_ELECT_ME_2.getText()));					}					public void removeUpdate(DocumentEvent e) {                        pic_ELECT_ME_2.setIcon(imageLoad.GetImage(txt_ELECT_ME_2.getText()));					};                });                                txt_ELECT_ME_3.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {					pic_ELECT_ME_3.setIcon(imageLoad.GetImage(txt_ELECT_ME_3.getText()));					}					public void removeUpdate(DocumentEvent e) {						pic_ELECT_ME_3.setIcon(imageLoad.GetImage(txt_ELECT_ME_3.getText()));					};                });                                txt_ELECT_ME_3.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {					pic_ELECT_ME_3.setIcon(imageLoad.GetImage(txt_ELECT_ME_3.getText()));					}					public void removeUpdate(DocumentEvent e) {						pic_ELECT_ME_3.setIcon(imageLoad.GetImage(txt_ELECT_ME_3.getText()));					};                });                                txt_ELECT_ME_4.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {					pic_ELECT_ME_4.setIcon(imageLoad.GetImage(txt_ELECT_ME_4.getText()));					}					public void removeUpdate(DocumentEvent e) {						pic_ELECT_ME_4.setIcon(imageLoad.GetImage(txt_ELECT_ME_4.getText()));					};                });                                txt_ELECT_RIVAL_1.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {					pic_ELECT_RIVAL_1.setIcon(imageLoad.GetImage(txt_ELECT_RIVAL_1.getText()));					}					public void removeUpdate(DocumentEvent e) {						pic_ELECT_RIVAL_1.setIcon(imageLoad.GetImage(txt_ELECT_RIVAL_1.getText()));					};                });                                txt_ELECT_RIVAL_2.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {					pic_ELECT_RIVAL_2.setIcon(imageLoad.GetImage(txt_ELECT_RIVAL_2.getText()));					}					public void removeUpdate(DocumentEvent e) {						pic_ELECT_RIVAL_2.setIcon(imageLoad.GetImage(txt_ELECT_RIVAL_2.getText()));					};                });                                txt_ELECT_RIVAL_3.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {						pic_ELECT_RIVAL_3.setIcon(imageLoad.GetImage(txt_ELECT_RIVAL_3.getText()));					}					public void removeUpdate(DocumentEvent e) {						pic_ELECT_RIVAL_3.setIcon(imageLoad.GetImage(txt_ELECT_RIVAL_3.getText()));					};                });                                txt_ELECT_RIVAL_4.getDocument().addDocumentListener(new DocumentListener(){                	public void changedUpdate(DocumentEvent de){                	}					public void insertUpdate(DocumentEvent e) {						pic_ELECT_RIVAL_4.setIcon(imageLoad.GetImage(txt_ELECT_RIVAL_4.getText()));					}					public void removeUpdate(DocumentEvent e) {						pic_ELECT_RIVAL_4.setIcon(imageLoad.GetImage(txt_ELECT_RIVAL_4.getText()));					};                });                               /* メニューバーの設定. */                JMenuBar menubar = new JMenuBar();                // 対戦種別.                JMenu menu_battle = new JMenu(Const.MENU_BATTLE_TYPE);                menubar.add(menu_battle);                setJMenuBar(menubar);                                // メニューバーにアイテム追加.                JMenuItem menuItem_single = new JMenuItem(Const.MENU_SINGLE_BATTLE);                JMenuItem menuItem_double = new JMenuItem(Const.MENU_DOUBLE_BATTLE);                menu_battle.add(menuItem_single);                menu_battle.add(menuItem_double);                                /* シングル・ダブルバトル切り替え処理. */                // 起動時はシングル.                Switcher(false);                                // メニューからシングルが選択された際の処理.                menuItem_single.addActionListener(new java.awt.event.ActionListener() {                     public void actionPerformed(java.awt.event.ActionEvent evt) {                     	// シングルバトルに切り替え.                    	Switcher(false);                    }                 });                                 // メニューからダブルが選択された際の処理.                menuItem_double.addActionListener(new java.awt.event.ActionListener() {                     public void actionPerformed(java.awt.event.ActionEvent evt) {                     	// ダブルバトルに切り替え.                    	Switcher(true);                    }                 });                                 // 登録処理.                getContentPane().add(btn_ENTRY);                btn_ENTRY.addMouseListener(new MouseAdapter() {                	@Override                	public void mouseClicked(MouseEvent e) {                		                		String rival_Name 		= null;                		String rival_Rate		= null;                		String rival_Show_1		= null;                		String rival_Show_2		= null;                		String rival_Show_3		= null;                		String rival_Show_4		= null;                		String rival_Show_5		= null;                		String rival_Show_6		= null;                		String elect_Me_1		= null;                		String elect_Me_2		= null;                		String elect_Me_3		= null;                		String elect_Me_4		= null;                		String elect_Rival_1	= null;                		String elect_Rival_2	= null;                		String elect_Rival_3	= null;                		String elect_Rival_4	= null;                		                 		// 入力情報をコンポーネントから取得.                		rival_Name		= txt_RIVAL_NAME.getText();              		 	rival_Rate		= txt_RIVAL_RATE.getText();              		 	rival_Show_1	= txt_RIVAL_SHOW_1.getText();              		 	rival_Show_2	= txt_RIVAL_SHOW_2.getText();              		 	rival_Show_3	= txt_RIVAL_SHOW_3.getText();              		 	rival_Show_4	= txt_RIVAL_SHOW_4.getText();              		 	rival_Show_5	= txt_RIVAL_SHOW_5.getText();              		 	rival_Show_6	= txt_RIVAL_SHOW_6.getText();              		 	elect_Me_1		= txt_ELECT_ME_1.getText();              		 	elect_Me_2		= txt_ELECT_ME_2.getText();              		 	elect_Me_3		= txt_ELECT_ME_3.getText();              		 	elect_Rival_1	= txt_ELECT_RIVAL_1.getText();              		 	elect_Rival_2	= txt_ELECT_RIVAL_2.getText();              		 	elect_Rival_3	= txt_ELECT_RIVAL_3.getText();              		 	              		 	/* ダブルバトル. */              		 	// 隠しテキストボックスからテキストを取得.              		 	String bl_double	 = txt_DOUBLE.getText();              		 	Boolean type		 = false;              		 	              		 	// falseならダブルバトル, trueならシングルバトル.              		 	if(bl_double.equals(Const.BL_FALSE)){              		 		// double              		 		type = false;              		 	}else{              		 		// single              		 		type = true;              		 	}              		 	              		 	// 格納.              		 	if(type){              		 		elect_Me_4 = txt_ELECT_ME_4.getText();              		 		elect_Rival_4 = txt_ELECT_ME_4.getText();              		 	}              		 	              		 	// 配列に格納.                  		String ttl[] =  {rival_Name, rival_Rate, rival_Show_1, rival_Show_2, rival_Show_3,                  							rival_Show_4, rival_Show_5, rival_Show_6, elect_Me_1, elect_Me_2, elect_Me_3,                  							elect_Rival_1, elect_Rival_2, elect_Rival_3, elect_Me_4, elect_Rival_4};   		                  		// 入力情報をチェック(対戦結果を除く).                  		Check check = new Check();                  		boolean tres = check.Chk_Total(ttl, type);               		                 	   // 対戦結果のチェック.                       boolean bl_Win = rbtn_WIN.isSelected();                       boolean bl_Los = rbtn_LOSE.isSelected();                       boolean bl_Cut = rbtn_CUT.isSelected();                       Util util = new Util();                       Integer res = util.isResult(bl_Win, bl_Los, bl_Cut);                       boolean rres = check.Chk_Result(res);	              		                       // 入力エラー処理.                       if(!(tres) || !(rres)){                    	   // エラーテキストの表示                    	   lbl_ERR.setText(Const.LBL_TEXT_ERR);                    	   repaint();                    	   // 入力内容を保持したまま.                    	   return;                       }else{                    	   // 成功時はエラーテキスト欄を空に.                    	   lbl_ERR.setText(Const.LBL_TEXT_ERR_EMPTY);               				repaint();                       }                               		// 入力内容をBeanにセット.               			ResultBean resultBean = new ResultBean();                		resultBean.setRival_Name(rival_Name);                		resultBean.setRival_Rate(rival_Rate);                		resultBean.setRival_Show_1(rival_Show_1);                		resultBean.setRival_Show_2(rival_Show_2);                		resultBean.setRival_Show_3(rival_Show_3);                		resultBean.setRival_Show_4(rival_Show_4);                		resultBean.setRival_Show_5(rival_Show_5);                		resultBean.setRival_Show_6(rival_Show_6);                		resultBean.setElect_Me_1(elect_Me_1);                		resultBean.setElect_Me_2(elect_Me_2);                		resultBean.setElect_Me_3(elect_Me_3);                		resultBean.setElect_Rival_1(elect_Rival_1);                		resultBean.setElect_Rival_2(elect_Rival_2);                		resultBean.setElect_Rival_3(elect_Rival_3);            		 	resultBean.setElect_Me_4(elect_Me_4);            		 	resultBean.setElect_Rival_4(elect_Rival_4);                		resultBean.setResult(res);              		 	                		                		/* 出力処理. */                		Writer wrt = new Writer();                		boolean bl_wrt = wrt.Export(resultBean, type);                		// 出力失敗時.                		if (!(bl_wrt)){                			lbl_ERR.setText(Const.EXPORT_ERR);                		}              		                		// 登録処理終了時にテキストボックスの内容を初期化.                		Gorilla.init();                		                		// ラジオボタンも初期化..                		rbtn_WIN.setSelected(true);                        	}                });                               btn_ENTRY.addKeyListener(new KeyAdapter() {                	public void keyPressed(KeyEvent e){                        btn_ENTRY.addMouseListener(new MouseAdapter() {                        	@Override                        	public void mouseClicked(MouseEvent e) {                        		                        		String rival_Name 		= null;                        		String rival_Rate		= null;                        		String rival_Show_1		= null;                        		String rival_Show_2		= null;                        		String rival_Show_3		= null;                        		String rival_Show_4		= null;                        		String rival_Show_5		= null;                        		String rival_Show_6		= null;                        		String elect_Me_1		= null;                        		String elect_Me_2		= null;                        		String elect_Me_3		= null;                        		String elect_Me_4		= null;                        		String elect_Rival_1	= null;                        		String elect_Rival_2	= null;                        		String elect_Rival_3	= null;                        		String elect_Rival_4	= null;                        		                         		// 入力情報をコンポーネントから取得.                        		rival_Name		= txt_RIVAL_NAME.getText();                      		 	rival_Rate		= txt_RIVAL_RATE.getText();                      		 	rival_Show_1	= txt_RIVAL_SHOW_1.getText();                      		 	rival_Show_2	= txt_RIVAL_SHOW_2.getText();                      		 	rival_Show_3	= txt_RIVAL_SHOW_3.getText();                      		 	rival_Show_4	= txt_RIVAL_SHOW_4.getText();                      		 	rival_Show_5	= txt_RIVAL_SHOW_5.getText();                      		 	rival_Show_6	= txt_RIVAL_SHOW_6.getText();                      		 	elect_Me_1		= txt_ELECT_ME_1.getText();                      		 	elect_Me_2		= txt_ELECT_ME_2.getText();                      		 	elect_Me_3		= txt_ELECT_ME_3.getText();                      		 	elect_Rival_1	= txt_ELECT_RIVAL_1.getText();                      		 	elect_Rival_2	= txt_ELECT_RIVAL_2.getText();                      		 	elect_Rival_3	= txt_ELECT_RIVAL_3.getText();                      		 	                      		 	/* ダブルバトル. */                      		 	// 隠しテキストボックスからテキストを取得.                      		 	String bl_double	 = txt_DOUBLE.getText();                      		 	Boolean type		 = false;                      		 	                      		 	// falseならダブルバトル, trueならシングルバトル.                      		 	if(bl_double.equals(Const.BL_FALSE)){                      		 		// double                      		 		type = false;                      		 	}else{                      		 		// single                      		 		type = true;                      		 	}                      		 	                      		 	// 格納.                      		 	if(type){                      		 		elect_Me_4 = txt_ELECT_ME_4.getText();                      		 		elect_Rival_4 = txt_ELECT_ME_4.getText();                      		 	}                      		 	                      		 	// 配列に格納.                          		String ttl[] =  {rival_Name, rival_Rate, rival_Show_1, rival_Show_2, rival_Show_3,                          							rival_Show_4, rival_Show_5, rival_Show_6, elect_Me_1, elect_Me_2, elect_Me_3,                          							elect_Rival_1, elect_Rival_2, elect_Rival_3, elect_Me_4, elect_Rival_4};           		                          		// 入力情報をチェック(対戦結果を除く).                          		Check check = new Check();                          		boolean tres = check.Chk_Total(ttl, type);                       		                         	   // 対戦結果のチェック.                               boolean bl_Win = rbtn_WIN.isSelected();                               boolean bl_Los = rbtn_LOSE.isSelected();                               boolean bl_Cut = rbtn_CUT.isSelected();                               Util util = new Util();                               Integer res = util.isResult(bl_Win, bl_Los, bl_Cut);                               boolean rres = check.Chk_Result(res);	                      		                               // 入力エラー処理.                               if(!(tres) || !(rres)){                            	   // エラーテキストの表示                            	   lbl_ERR.setText(Const.LBL_TEXT_ERR);                            	   repaint();                            	   // 入力内容を保持したまま.                            	   return;                               }else{                            	   // 成功時はエラーテキスト欄を空に.                            	   lbl_ERR.setText(Const.LBL_TEXT_ERR_EMPTY);                       				repaint();                               }                                               		// 入力内容をBeanにセット.                       			ResultBean resultBean = new ResultBean();                        		resultBean.setRival_Name(rival_Name);                        		resultBean.setRival_Rate(rival_Rate);                        		resultBean.setRival_Show_1(rival_Show_1);                        		resultBean.setRival_Show_2(rival_Show_2);                        		resultBean.setRival_Show_3(rival_Show_3);                        		resultBean.setRival_Show_4(rival_Show_4);                        		resultBean.setRival_Show_5(rival_Show_5);                        		resultBean.setRival_Show_6(rival_Show_6);                        		resultBean.setElect_Me_1(elect_Me_1);                        		resultBean.setElect_Me_2(elect_Me_2);                        		resultBean.setElect_Me_3(elect_Me_3);                        		resultBean.setElect_Rival_1(elect_Rival_1);                        		resultBean.setElect_Rival_2(elect_Rival_2);                        		resultBean.setElect_Rival_3(elect_Rival_3);                    		 	resultBean.setElect_Me_4(elect_Me_4);                    		 	resultBean.setElect_Rival_4(elect_Rival_4);                        		resultBean.setResult(res);                      		 	                		                        		/* 出力処理. */                        		Writer wrt = new Writer();                        		boolean bl_wrt = wrt.Export(resultBean, type);                        		// 出力失敗時.                        		if (!(bl_wrt)){                        			lbl_ERR.setText(Const.EXPORT_ERR);                        		}                      		                        		// 登録処理終了時にテキストボックスの内容を初期化.                        		Gorilla.init();                        		                        		// ラジオボタンも初期化..                        		rbtn_WIN.setSelected(true);                                	}                        });                	}                });    }    @Override	public void actionPerformed(ActionEvent e) {    }    public static void main(String[] args) {    	    	try{    		    		/* スクリーンメニュー(メニューバー)の設定. */    		// OS名を取得.    		String OS_Name = System.getProperty(Const.OS_NAME);    		    		// MacOS or Linuxの場合はスクリーンメニューバーを設定.    		if (OS_Name.indexOf(Const.MAC_OS) != Const.NOT_FOUND    				|| OS_Name.indexOf(Const.LINUX_OS) != Const.NOT_FOUND){    			System.setProperty("apple.laf.useScreenMenuBar", "true");    		}    	    		// frame作成.    		JFrame frame = new Gorilla();     		// 標準サイズ指定.    		frame.setBounds(Const.BOUNDS_X, Const.BOUNDS_Y, Const.BOUNDS_WIDTH, Const.BOUNDS_HEIGHT);    		// 最小サイズ指定.    		frame.setMinimumSize(new Dimension(Const.BOUNDS_WIDTH, Const.BOUNDS_HEIGHT));            		// 可視化.    		frame.setVisible(true);    		// 各テキストボックスの初期化処理    		init();    		// 閉じるボタン押されたら終了.    		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            	}catch(Exception e){    		e.printStackTrace();    	}    }        protected static void init(){	    	try{    	    		txt_RIVAL_NAME.setText(Const.Empty);    		txt_RIVAL_RATE.setText(Const.Empty);    		txt_RIVAL_SHOW_1.setText(Const.Empty);    		txt_RIVAL_SHOW_2.setText(Const.Empty);    		txt_RIVAL_SHOW_3.setText(Const.Empty);    		txt_RIVAL_SHOW_4.setText(Const.Empty);    		txt_RIVAL_SHOW_5.setText(Const.Empty);    		txt_RIVAL_SHOW_6.setText(Const.Empty);    		txt_ELECT_ME_1.setText(Const.Empty);    		txt_ELECT_ME_2.setText(Const.Empty);    		txt_ELECT_ME_3.setText(Const.Empty);    		txt_ELECT_ME_4.setText(Const.Empty);    		txt_ELECT_RIVAL_1.setText(Const.Empty);    		txt_ELECT_RIVAL_2.setText(Const.Empty);    		txt_ELECT_RIVAL_3.setText(Const.Empty);    		txt_ELECT_RIVAL_4.setText(Const.Empty);		    	} catch(Exception e){    		e.printStackTrace();    	}    }     /***     * シングル,ダブルバトルの切り替えを行います。     * (テキストボックスの有効,無効化、隠しテキストボックスの内容変更)     * @param type     */    protected static void Switcher(boolean type){    	    	try{    	    	// 内容を初期化.    	txt_ELECT_RIVAL_4.setText(Const.Empty);    	txt_ELECT_ME_4.setText(Const.Empty);    	    	// 有効化or初期化    	txt_ELECT_RIVAL_4.setEnabled(type);    	txt_ELECT_ME_4.setEnabled(type);    	txt_DOUBLE.setText(bl_btl(type));    	    	    	}catch(Exception e){    		e.printStackTrace();    	}    }    /***     * booleanで渡された対戦種別をStringにして返します。     * @param type true-double, false-single     * @return true-"single", false-"double"     */    public static String bl_btl(boolean type){    	    	String btl = null;    	    	if (type){    		btl  = Const.BL_TRUE;    	}else{    		btl =  Const.BL_FALSE;    	}    	return btl;    }}